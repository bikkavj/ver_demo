name: Semantic Versioning

on:
  pull_request:
    types:
      - closed
    branches:
      - staging
      - prod

jobs:
  versioning:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures full commit history for versioning

      - name: Prevent Direct Merging to Prod (Only Allowed from Staging or Hotfix)
        run: |
          base_branch="${{ github.event.pull_request.base.ref }}"
          head_branch="${{ github.event.pull_request.head.ref }}"
          echo "Base Branch: $base_branch"
          echo "Head Branch: $head_branch"

          if [[ "$base_branch" == "prod" && "$head_branch" != "staging" && ! "$head_branch" =~ ^hot/ ]]; then
            echo "Error: Only staging or hotfix (hot/*) branches can be merged into prod!"
            exit 1
          fi

          if [[ "$base_branch" == "staging" && "$head_branch" != "develop" && ! "$head_branch" =~ ^bug/ ]]; then
            echo "Error: Only develop or bugfix (bug/*) branches can be merged into staging!"
            exit 1
          fi

      - name: Get Semantic Version
        id: versioning
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}-rc${increment}"
          bump_each_commit: false
          search_commit_body: true
          enable_prerelease_mode: true
          debug: true # Enables logging

      - name: Determine Version Type
        id: determine_version
        run: |
          set -e # Exit if any command fails
          base_branch="${{ github.event.pull_request.base.ref }}"
          head_branch="${{ github.event.pull_request.head.ref }}"
          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body }}"
          new_version="${{ steps.versioning.outputs.version }}"
          echo "Branch: $branch"
          echo "Base Version: $new_version"
          
          # Default prerelease flag
          prerelease="false"

          if [[ -z "$new_version" ]]; then
            echo "Error: new_version is empty"
            exit 1
          fi

          if [[ "$branch" == "staging" ]]; then
            last_version=$(git tag --list "$new_version-rc.*" | sort -V | tail -n 1)

            if [[ -z "$latest_rc_tag" ]]; then
              rc_number=1
            else
              rc_number=$(echo "$latest_rc_tag" | grep -o '[0-9]*$')
              rc_number=$((rc_number + 1))
            fi
            new_version="$new_version-rc.$rc_number"
            echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
            echo "PRERELEASE=true" >> $GITHUB_ENV
          fi

          if [[ "$branch" == "prod" ]]; then
            latest_rc_tag=$(git tag --list "$new_version-rc.*" | sort -V | tail -n 1)

            if [[ -n "$latest_rc_tag" ]]; then
              new_version="${latest_rc_tag%-rc.*}"  # Strip off `-rc.N`
            fi
            # Check if a major or minor bump is needed
            last_version=$(git tag --list "v*" | sort -V | tail -n 1)
            major=$(echo "$last_version" | cut -d. -f1 | tr -d 'v')
            minor=$(echo "$last_version" | cut -d. -f2)
            patch=$(echo "$last_version" | cut -d. -f3)

            if echo "$pr_title" | grep -q "(MAJOR)" || echo "$pr_body" | grep -q "(MAJOR)"; then
              major=$((major + 1))
              minor=0
              patch=0
            elif echo "$pr_title" | grep -q "(MINOR)" || echo "$pr_body" | grep -q "(MINOR)"; then
              minor=$((minor + 1))
              patch=0
            else
              patch=$((patch + 1))
            fi

            new_version="v$major.$minor.$patch"
            echo "Final Production Version: $new_version"
            echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
            echo "PRERELEASE=false" >> $GITHUB_ENV
          fi

      - name: Push New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # git config --global url."https://${{ secrets.GIT_TOKEN }}@github.com/".insteadOf "https://github.com/"
          # echo "GIT Authentication configured"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/bikkavj/ver_demo.git
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: "Automated release for ${{ env.NEW_VERSION }}"
          prerelease: ${{ env.PRERELEASE }}

